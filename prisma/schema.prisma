// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  username String @unique
  role     Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Provider {
  id    String @id @default(uuid())
  name  String
  alias String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                String @id @default(uuid())
  name              String
  key               String @unique
  availableQuantity Int    @default(0)
  salePriceMXN      Float

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId String

  history ProductHistory[]
  orders  ProductOnOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductHistory {
  id                         String   @id @default(uuid())
  quantityPerCarton          Int
  chinesePriceUSD            Float
  dollarExchangeRate         Float
  pricePerCartonOrProductUSD Float
  costMXN                    Float
  shippingCostMXN            Float
  totalCostMXN               Float
  salePriceMXN               Float
  margin                     Float
  salePerQuantity            Float
  orderDate                  DateTime

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOnOrder {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  quantity  Int

  @@id([productId, orderId])
}

enum DeliveryStatus {
  PENDING
  CANCELLED
  DELIVERED
}

model Order {
  id             String         @id @default(uuid())
  client         String // CONSIDER CHANGE TO USER IN A FUTURE
  discount       Float?
  subtotal       Float
  total          Float
  shipmentType   String
  isPaid         Boolean        @default(false)
  deliveryStatus DeliveryStatus @default(PENDING)
  pendingPayment Float?

  products ProductOnOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
